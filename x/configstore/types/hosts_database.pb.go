// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: runoschain/configstore/hosts_database.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HostsDatabase struct {
	Dpid    string `protobuf:"bytes,1,opt,name=dpid,proto3" json:"dpid,omitempty"`
	Mac     string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	Inport  string `protobuf:"bytes,3,opt,name=inport,proto3" json:"inport,omitempty"`
	Creator string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *HostsDatabase) Reset()         { *m = HostsDatabase{} }
func (m *HostsDatabase) String() string { return proto.CompactTextString(m) }
func (*HostsDatabase) ProtoMessage()    {}
func (*HostsDatabase) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b5fa0bfce50ce7b, []int{0}
}
func (m *HostsDatabase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostsDatabase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostsDatabase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostsDatabase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostsDatabase.Merge(m, src)
}
func (m *HostsDatabase) XXX_Size() int {
	return m.Size()
}
func (m *HostsDatabase) XXX_DiscardUnknown() {
	xxx_messageInfo_HostsDatabase.DiscardUnknown(m)
}

var xxx_messageInfo_HostsDatabase proto.InternalMessageInfo

func (m *HostsDatabase) GetDpid() string {
	if m != nil {
		return m.Dpid
	}
	return ""
}

func (m *HostsDatabase) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *HostsDatabase) GetInport() string {
	if m != nil {
		return m.Inport
	}
	return ""
}

func (m *HostsDatabase) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*HostsDatabase)(nil), "runos_chain.configstore.HostsDatabase")
}

func init() {
	proto.RegisterFile("runoschain/configstore/hosts_database.proto", fileDescriptor_7b5fa0bfce50ce7b)
}

var fileDescriptor_7b5fa0bfce50ce7b = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2e, 0x2a, 0xcd, 0xcb,
	0x2f, 0x4e, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x2f, 0x2e, 0xc9,
	0x2f, 0x4a, 0xd5, 0xcf, 0xc8, 0x2f, 0x2e, 0x29, 0x8e, 0x4f, 0x49, 0x2c, 0x49, 0x4c, 0x4a, 0x2c,
	0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x07, 0x2b, 0x8e, 0x07, 0xab, 0xd6, 0x43,
	0x52, 0xad, 0x94, 0xce, 0xc5, 0xeb, 0x01, 0xd2, 0xe0, 0x02, 0x55, 0x2f, 0x24, 0xc4, 0xc5, 0x92,
	0x52, 0x90, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x66, 0x0b, 0x09, 0x70, 0x31,
	0xe7, 0x26, 0x26, 0x4b, 0x30, 0x81, 0x85, 0x40, 0x4c, 0x21, 0x31, 0x2e, 0xb6, 0xcc, 0xbc, 0x82,
	0xfc, 0xa2, 0x12, 0x09, 0x66, 0xb0, 0x20, 0x94, 0x27, 0x24, 0xc1, 0xc5, 0x9e, 0x5c, 0x94, 0x9a,
	0x58, 0x92, 0x5f, 0x24, 0xc1, 0x02, 0x96, 0x80, 0x71, 0x9d, 0x2c, 0x4f, 0x3c, 0x92, 0x63, 0xbc,
	0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63,
	0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x1e, 0xc9, 0x6d, 0xfa, 0x15, 0x28, 0x7e, 0x29, 0xa9, 0x2c,
	0x48, 0x2d, 0x4e, 0x62, 0x03, 0xfb, 0xc1, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xb8, 0x01,
	0x5d, 0xf2, 0x00, 0x00, 0x00,
}

func (m *HostsDatabase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostsDatabase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostsDatabase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintHostsDatabase(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Inport) > 0 {
		i -= len(m.Inport)
		copy(dAtA[i:], m.Inport)
		i = encodeVarintHostsDatabase(dAtA, i, uint64(len(m.Inport)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mac) > 0 {
		i -= len(m.Mac)
		copy(dAtA[i:], m.Mac)
		i = encodeVarintHostsDatabase(dAtA, i, uint64(len(m.Mac)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Dpid) > 0 {
		i -= len(m.Dpid)
		copy(dAtA[i:], m.Dpid)
		i = encodeVarintHostsDatabase(dAtA, i, uint64(len(m.Dpid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHostsDatabase(dAtA []byte, offset int, v uint64) int {
	offset -= sovHostsDatabase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostsDatabase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dpid)
	if l > 0 {
		n += 1 + l + sovHostsDatabase(uint64(l))
	}
	l = len(m.Mac)
	if l > 0 {
		n += 1 + l + sovHostsDatabase(uint64(l))
	}
	l = len(m.Inport)
	if l > 0 {
		n += 1 + l + sovHostsDatabase(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovHostsDatabase(uint64(l))
	}
	return n
}

func sovHostsDatabase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHostsDatabase(x uint64) (n int) {
	return sovHostsDatabase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostsDatabase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHostsDatabase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostsDatabase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostsDatabase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dpid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dpid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mac", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mac = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHostsDatabase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHostsDatabase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHostsDatabase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHostsDatabase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHostsDatabase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHostsDatabase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHostsDatabase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHostsDatabase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHostsDatabase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHostsDatabase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHostsDatabase = fmt.Errorf("proto: unexpected end of group")
)
